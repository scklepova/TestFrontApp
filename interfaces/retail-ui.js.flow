// @flow
/* eslint-disable */

declare type ReactExactProps<T> = $Exact<T>;

declare module "retail-ui/components/Autocomplete" {
    declare type AutocompleteProps = ReactExactProps<{
        "data-tid"?: string,
        source: string => Promise<string[]>,
        placeholder?: ?string,
        autoFocus?: boolean,
        width?: ?number | ?string,
        leftIcon?: React$Node,
        value: ?string,
        onChange: (SyntheticEvent<>, string) => void,
    }>;
    declare export default class Autocomplete extends React$Component<AutocompleteProps, void> {}
}

declare module "retail-ui/components/Button" {
    declare type ButtonProps = ReactExactProps<{
        "data-tid"?: string,
        active?: boolean,
        checked?: boolean,
        children?: any,
        disabled?: boolean,
        focused?: boolean,
        icon?: ?string,
        loading?: boolean,
        narrow?: boolean,
        size?: "small" | "medium" | "large",
        type?: "button" | "submit" | "reset",
        use?: "default" | "primary" | "success" | "danger" | "pay" | "link",
        width?: ?number | ?string,
        arrow?: boolean,
        onClick?: (e: SyntheticMouseEvent<>) => void,
        onKeyDown?: (e: SyntheticKeyboardEvent<>) => void,
        onMouseEnter?: (e: SyntheticMouseEvent<>) => void,
        onMouseLeave?: (e: SyntheticMouseEvent<>) => void,
        onMouseOver?: (e: SyntheticMouseEvent<>) => void,
    }>;
    declare export default class Button extends React$Component<ButtonProps, void> {}
}

declare module "retail-ui/components/Center" {
    declare type CenterProps = ReactExactProps<{
        "data-tid"?: string,
        className?: ?string,
        style?: ?Object,
        align?: "center",
        children?: any,
    }>;
    declare export default class Center extends React$Component<CenterProps, void> {}
}

declare module "retail-ui/components/Checkbox" {
    declare type CheckboxProps = ReactExactProps<{
        "data-tid"?: string,
        disabled?: boolean,
        checked: boolean,
        children?: any,
        onChange?: (event: Event, nextChecked: boolean) => void,
    }>;
    declare export default class Checkbox extends React$Component<CheckboxProps, void> {}
}

declare module "retail-ui/components/ComboBoxOld" {
    // Есть вероятность, что затипизировано неполностью и с ошибками,
    // ибо типизировался ad-hoc для использований которые были на данный момент в проекте.
    // С вопросами обращаться к tihonove
    declare type ComboBoxOldProps<TValue, TInfo> = ReactExactProps<{
        "data-tid"?: string,
        width?: ?string | ?number,
        placeholder?: ?string,
        disabled?: boolean,
        error?: boolean,

        source: (searchText: string) => Promise<?{ values: TValue[], infos: TInfo[] }>,
        value: ?TValue,
        info?: TValue => Promise<?TInfo>,
        renderValue: (TValue, TInfo) => React$Node,
        renderItem: (TValue, TInfo) => React$Node,
        valueToString?: TValue => ?string,
        renderNotFound?: string | ((searchText: string) => React$Node),
        onChange: (event: SyntheticEvent<>, value: ?TValue, info: ?TInfo) => void,
        recover?: (pattern: string) => ?{ value: ?TValue, info: TInfo },
        autoFocus?: boolean,
    }>;
    declare export default class ComboBoxOld<TValue, TInfo> extends React$Component<
        ComboBoxOldProps<TValue, TInfo>,
        void
    > {}
}

declare module "retail-ui/components/DatePicker" {
    declare type DatePickerProps = ReactExactProps<{
        ref?: string | ((?DatePicker) => void),
        error?: boolean,
        disabled?: boolean,
        placeholder?: string,
        width?: number,
        "data-tid"?: string,
        value: ?Date,
        onChange: (Event, Date) => void,
    }>;
    declare export default class DatePicker extends React$Component<DatePickerProps, void> {
        focus(): void;
    }
}

declare module "retail-ui/components/Dropdown" {
    declare type DropdownProps = ReactExactProps<{
        "data-tid"?: string,
        caption: React$Node,
        children?: any,
    }>;
    declare export default class Dropdown extends React$Component<DropdownProps, void> {}
}

declare module "retail-ui/components/Gapped" {
    declare type GappedProps = ReactExactProps<{
        "data-tid"?: string,
        vertical?: boolean,
        verticalAlign?: "top" | "middle" | "baseline" | "bottom",
        gap?: number | string,
        children?: any,
    }>;
    declare export default class Gapped extends React$Component<GappedProps, void> {}
}

declare module "retail-ui/components/Group" {
    declare type GroupProps = ReactExactProps<{
        "data-tid"?: string,
        children?: any,
    }>;
    declare export default class Group extends React$Component<GroupProps, void> {}
}

declare module "retail-ui/components/Icon" {
    declare type IconProps = ReactExactProps<{
        "data-tid"?: string,
        name: ?string,
        color?: ?string,
        size?: ?number | ?string,
    }>;
    declare export default class Icon extends React$Component<IconProps, void> {}
}

declare module "retail-ui/components/Input" {
    declare type InputProps = ReactExactProps<{
        borderless?: boolean,
        className?: ?string,
        error?: boolean,
        id?: ?string,
        leftIcon?: React$Node,
        rightIcon?: React$Node,
        maskChar?: ?string,
        maxLength?: number,
        mask?: ?string,
        alwaysShowMask?: boolean,
        autoFocus?: ?boolean,
        disabled?: boolean,
        "data-tid"?: string,
        width?: number | string,
        placeholder?: ?string,
        value: string,
        onBlur?: (event: SyntheticEvent<>) => void,
        onFocus?: (event: SyntheticEvent<>) => void,
        onMouseEnter?: (event: SyntheticEvent<>) => void,
        onMouseLeave?: (event: SyntheticEvent<>) => void,
        onKeyUp?: (event: SyntheticKeyboardEvent<>) => void,
        onKeyDown?: (event: SyntheticKeyboardEvent<>) => void,
        onKeyPress?: (event: SyntheticKeyboardEvent<>) => void,
        onChange?: (event: SyntheticEvent<>, value: string) => void,
    }>;
    declare export default class Input extends React$Component<InputProps, void> {
        focus(): void;
        setSelectionRange(start: number, end: number): void;
    }
}

declare module "retail-ui/components/PhoneInput" {
    declare type PhoneInputProps = ReactExactProps<{
        borderless?: boolean,
        className?: ?string,
        error?: boolean,
        id?: ?string,
        autoFocus?: boolean,
        disabled?: boolean,
        "data-tid"?: string,
        width?: number | string,
        value: string,
        onBlur?: (event: Event) => void,
        onFocus?: (event: Event) => void,
        onKeyDown?: (event: Event) => void,
        onKeyPress?: (event: Event) => void,
        onChange?: (event: Event, value: string) => void,
    }>;
    declare export default class PhoneInput extends React$Component<PhoneInputProps, void> {}
}

declare module "retail-ui/components/Link" {
    declare type LinkProps = ReactExactProps<{
        "data-tid"?: string,
        tabIndex?: ?string | ?number,
        "data-prevent-edi-legacy"?: boolean,
        icon?: string,
        href?: ?string,
        use?: "default" | "success" | "danger" | "grayed",
        target?: ?string,
        disabled?: boolean,
        children?: any,
        onClick?: (event: SyntheticMouseEvent<>) => void,
        onMouseEnter?: (e: SyntheticMouseEvent<>) => void,
        onMouseLeave?: (e: SyntheticMouseEvent<>) => void,
        onMouseOver?: (e: SyntheticMouseEvent<>) => void,
    }>;
    declare export default class Link extends React$Component<LinkProps, void> {}
}

declare module "retail-ui/components/Loader" {
    declare type LoaderProps = {
        "data-tid"?: string,
        active?: boolean,
        caption?: string,
        className?: ?string,
        children?: any,
        type?: "mini" | "normal" | "big",
    };
    declare export default class Loader extends React$Component<LoaderProps, void> {}
}

declare module "retail-ui/components/Modal" {
    declare type ModalProps = ReactExactProps<{
        "data-tid"?: string,
        onClose?: () => void,
        width?: ?string | ?number,
        children?: any,
        ignoreBackgroundClick?: boolean,
        noClose?: boolean,
    }>;

    declare type HeaderProps = ReactExactProps<{
        "data-tid"?: string,
        children?: any,
    }>;
    declare type BodyProps = ReactExactProps<{
        "data-tid"?: string,
        children?: any,
    }>;
    declare type FooterProps = ReactExactProps<{
        "data-tid"?: string,
        panel?: boolean,
        children?: any,
    }>;

    declare export default class Modal extends React$Component<ModalProps, void> {
        static Header: Class<React$Component<HeaderProps, void>>;
        static Body: Class<React$Component<BodyProps, void>>;
        static Footer: Class<React$Component<FooterProps, void>>;
    }
}

declare module "retail-ui/components/Radio" {
    declare type RadioProps = ReactExactProps<{
        "data-tid"?: string,
        disabled?: boolean,
        checked: boolean,
        children?: any,
    }>;
    declare export default class Radio extends React$Component<RadioProps, void> {}
}

declare module "retail-ui/components/RadioGroup" {
    declare type RadioGroupProps<T> = ReactExactProps<{
        "data-tid"?: string,
        items: T[],
        value: ?T,
        onChange: (Event, T) => void,
        renderItem: T => React$Node,
    }>;
    declare export default class RadioGroup<T> extends React$Component<RadioGroupProps<T>, void> {}
}

declare module "retail-ui/components/RenderContainer" {
    declare type RenderContainerProps = ReactExactProps<{
        "data-tid"?: string,
        children?: any,
    }>;
    declare export default class RenderContainer extends React$Component<RenderContainerProps, void> {}
}

declare module "retail-ui/components/Select" {
    // Есть вероятность, что затипизировано неполностью и с ошибками,
    // ибо типизировался ad-hoc для использований которые были на данный момент в проекте.
    // С вопросами обращаться к tihonove
    declare type SelectProps<T, TRenderElement> =
        | ReactExactProps<{
              "data-tid"?: string,
              width?: ?string | ?number,
              placeholder?: React$Node,
              disabled?: boolean,
              defaultValue?: T,
              error?: boolean,
              items: Array<[T, TRenderElement]> | Map<T, TRenderElement>,
              renderItem?: (T, TRenderElement) => React$Node,
              renderValue?: (T, TRenderElement) => React$Node,
              value: ?T,
              onChange: (SyntheticEvent<>, T) => void,
              maxMenuHeight?: number,
          }>
        | ReactExactProps<{
              itemsIsValue: true,
              "data-tid"?: string,
              width?: ?string | ?number,
              placeholder?: React$Node,
              disabled?: boolean,
              defaultValue?: T,
              error?: boolean,
              items: T[],
              value: ?T,
              maxMenuHeight?: number,
              onChange: (SyntheticEvent<>, T) => void,
              renderItem?: (T, T) => React$Node,
              renderValue?: (T, T) => React$Node,
          }>;
    declare export default class Select<T, TRenderElement> extends React$Component<
        SelectProps<T, TRenderElement>,
        void
    > {
        static SEP: string;
    }
}

declare module "retail-ui/components/Spinner" {
    declare type SpinnerProps = ReactExactProps<{
        "data-tid"?: string,
        caption?: string,
        type?: "mini" | "normal" | "big",
    }>;
    declare export default class Spinner extends React$Component<SpinnerProps, void> {}
}

declare module "retail-ui/components/Sticky" {
    declare type StickyProps = ReactExactProps<{
        "data-tid"?: string,
        children?: any,
        side?: "top" | "bottom",
        getStop?: () => ?HTMLElement,
        offset?: number,
    }>;
    declare export default class Sticky extends React$Component<StickyProps, void> {}
}

declare module "retail-ui/components/Textarea" {
    declare type TextareaProps = {
        "data-tid"?: string,
        className?: ?string,
        error?: boolean,
        id?: ?string,
        maxLength?: number,
        autoFocus?: boolean,
        disabled?: boolean,
        rows?: number | string,
        placeholder?: ?string,
        value: string,
        onBlur?: (event: SyntheticEvent<>) => void,
        onFocus?: (event: SyntheticEvent<>) => void,
        onChange?: (event: SyntheticEvent<>, value: string) => void,
        onMouseEnter?: (event: SyntheticMouseEvent<>) => void,
        onMouseLeave?: (event: SyntheticMouseEvent<>) => void,
        onMouseOver?: (event: SyntheticMouseEvent<>) => void,
    };
    declare export default class Textarea extends React$Component<TextareaProps, void> {}
}

declare module "retail-ui/components/Tooltip" {
    declare type TooltipProps = ReactExactProps<{
        "data-tid"?: string,
        render: () => React$Node,
        trigger?: "hover" | "click" | "focus" | "opened" | "closed",
        children?: any,
        onCloseClick?: () => void,
    }>;
    declare export default class Tooltip extends React$Component<TooltipProps, void> {}
}

declare module "retail-ui/components/MenuItem" {
    declare type MenuItemProps = ReactExactProps<{
        "data-tid"?: string,
        loose?: boolean,
        target?: ?string,
        href?: ?string,
        icon?: ?string,
        value?: mixed,
        onClick?: (SyntheticEvent<>) => void,
        children?: any,
    }>;
    declare export default class MenuItem extends React$Component<MenuItemProps, void> {}
}

declare module "retail-ui/components/MenuSeparator" {
    declare type MenuSeparatorProps = ReactExactProps<{
        "data-tid"?: string,
    }>;
    declare export default class MenuSeparator extends React$Component<MenuSeparatorProps, void> {}
}

declare module "retail-ui/components/Hint" {
    declare type HintProps = {
        "data-tid"?: string,
    };
    declare export default class Hint extends React$Component<HintProps, void> {}
}

declare module "retail-ui/lib/dom/addClass" {
    declare function addClass(element: HTMLElement, className: string): void;
    declare export default addClass
}

declare module "retail-ui/lib/dom/removeClass" {
    declare function removeClass(element: HTMLElement, className: string): void;
    declare export default removeClass
}

declare module "retail-ui/lib/Upgrades" {
    declare type UpgradesInterface = ReactExactProps<{
        enableHeight34: () => void,
    }>;
    declare export default UpgradesInterface
}

declare module "retail-ui/lib/pluralize" {
    declare function pluralize(count: number, one: string, few: string, many: string): string;
    declare export default pluralize
}

declare module "retail-ui/lib/listenFocusOutside" {
    declare export type ListenFocusOutsideSubscription = {
        remove: () => void,
    };

    declare type ListenFocusOutsideInterface = (
        elements: HTMLElement[],
        callback: (element: HTMLElement) => any
    ) => ListenFocusOutsideSubscription;
    declare export default ListenFocusOutsideInterface
}

declare module "retail-ui/lib/LayoutEvents" {
    declare export type LayoutEventsSubscription = {
        remove: () => void,
    };

    declare type LayoutEventsInterface = {
        addListener: (callback: () => any) => LayoutEventsSubscription,
        emit: () => void,
    };

    declare export default LayoutEventsInterface
}

declare module "retail-ui/lib/pluralize" {
    declare type PluralizeInterface = (n: number, one: string, few: string, many: string) => string;
    declare export default PluralizeInterface
}

declare module "retail-ui/lib/dom/addClass" {
    declare export default function addClass(element: HTMLElement, className: string): void;
}
declare module "retail-ui/lib/dom/removeClass" {
    declare export default function removeClass(element: HTMLElement, className: string): void;
}

declare module "retail-ui/components/Toast" {
    declare type ToastProps = {};
    declare export default class Toast extends React$Component<ToastProps, void> {
        static push(text: string, options?: { label?: string }): void;
        static close(): void;
    }
}

declare module "retail-ui/components/TopBar" {
    declare type TopBarMenuItemProps = ReactExactProps<{
        "data-tid"?: string,
        loose?: boolean,
        target?: ?string,
        href?: ?string,
        value?: mixed,
        children?: any,
    }>;

    declare type TopBarDropdownProps = ReactExactProps<{
        "data-tid"?: string,
        caption: React$Node,
        children?: any,
        icon?: string,
        onOpen?: () => void,
    }>;

    declare type TopBarProps = {
        "data-tid"?: string,
        noMargin?: boolean,
        userName?: React$Node,
    };

    declare export default class TopBar extends React$Component<TopBarProps, void> {
        static Dropdown: Class<React$Component<TopBarDropdownProps, void>>;
        static OrganizationsDropdown: Class<React$Component<TopBarDropdownProps, void>>;
        static Item: Class<React$Component<TopBarMenuItemProps, void>>;
    }
}

declare module "retail-ui/components/RenderLayer" {
    declare type RenderLayerProps = ReactExactProps<{
        children?: any,
        onClickOutside?: () => void,
    }>;
    declare export default class RenderLayer extends React$Component<RenderLayerProps, void> {}
}

declare module "retail-ui/components/Kebab" {
    declare type KebabProps = ReactExactProps<{
        children?: React$Node,
        className?: ?string,
    }>;
    declare export default class Kebab extends React$Component<KebabProps, void> {}
}

declare module "retail-ui/components/Tabs" {
    declare type TabsProps = ReactExactProps<{
        "data-tid"?: ?string,
        children?: React$Node,
        indicatorClassName?: ?string,
        value: ?string,
        vertical?: ?boolean,
        width?: string | number,
        onChange: (event: SyntheticEvent<>, activeTab: string) => void,
    }>;

    declare type TabProps = ReactExactProps<{
        "data-tid"?: ?string,
        children?: React$Node,
        component?: string | Class<React$Component<any, any>>,
        href?: ?string,
        id: string,
        onClick?: (event: SyntheticEvent<>) => void,
    }>;
    declare export default class Tabs extends React$Component<TabsProps, void> {
        static Tab: Class<React$Component<TabProps, void>>;
    }
}
